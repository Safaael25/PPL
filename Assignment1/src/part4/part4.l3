#lang racket/base

(define (empty? lst)
  (null? lst))

; Signature: append : (list any) (list any) -> (list any)
; Type: (list of any) (list of any) -> (list of any)
; Purpose: Concatenate two lists into a single list.
; Pre-conditions: Both inputs must be valid lists.
; Tests:
;   (append '(1 2) '(3 4)) -> '(1 2 3 4)
;   (append '() '(3 4)) -> '(3 4)
;   (append '(1 2) '()) -> '(1 2)
;   (append '() '()) -> '()

(define append
  (lambda (l1 l2)
    (if (empty? l1)
        l2
        (cons (car l1) (append (cdr l1) l2)))))

; Signature: reverse : (list any) -> (list any)
; Type: (list of any) -> (list of any)
; Purpose: Reverse the elements in the list.
; Pre-conditions: The input must be a valid list.
; Tests:
;   (reverse '(1 2 3)) -> '(3 2 1)
;   (reverse '()) -> '()
;   (reverse '(a b c)) -> '(c b a)
;   (reverse '(1)) -> '(1)

(define reverse
  (lambda (l)
    (if (empty? l)
        '()
        (append (reverse (cdr l)) (list (car l))))))

; Signature: duplicate-items : (list any) (list number) -> (list any)
; Type: (list of any) (list of numbers) -> (list of any)
; Purpose: To duplicate each item in the first list according to the corresponding number in the second list.
; Pre-conditions: Both inputs must be valid lists, and the second list must contain non-negative integers.
; Tests:
;   (duplicate-items '(1 2 3) '(1 0 2)) -> '(1 3 3)
;   (duplicate-items '(1 2 3) '(2 1 0)) -> '(1 1 2)
;   (duplicate-items '() '(1 2 3)) -> '()
;   (duplicate-items '(1 2) '(2)) -> '(1 1)

(define duplicate-items
  (lambda (lst count)
    (if (or (empty? lst) (empty? count))
        '()
        (append (duplicateNumber (car lst) (car count))
                (duplicate-items (cdr lst) (cdr count))))))

(define duplicateNumber
  (lambda (unitLst count)
    (if (= count 0)
        '()
        (cons unitLst (duplicateNumber unitLst (- count 1))))))
